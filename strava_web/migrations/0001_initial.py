# Generated by Django 5.2.3 on 2025-07-01 23:19

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0013_group_has_dashboard_group_is_open'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('strava_id', models.BigIntegerField(blank=True, help_text="The unique identifier for the user's Strava account.", null=True, unique=True, verbose_name='Strava ID')),
                ('strava_access_token', models.CharField(blank=True, help_text='OAuth 2.0 Access Token for Strava API calls.', max_length=255, null=True, verbose_name='Strava Access Token')),
                ('strava_refresh_token', models.CharField(blank=True, help_text='OAuth 2.0 Refresh Token for obtaining new access tokens.', max_length=255, null=True, verbose_name='Strava Refresh Token')),
                ('strava_token_expires_at', models.DateTimeField(blank=True, help_text='UTC timestamp when the Strava access token expires.', null=True, verbose_name='Token Expiration')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('last_strava_sync', models.DateTimeField(blank=True, help_text="Last time user's Strava data was synced.", null=True, verbose_name='Last Strava Sync')),
                ('recent_run_distance', models.FloatField(blank=True, null=True)),
                ('recent_run_count', models.IntegerField(blank=True, null=True)),
                ('recent_run_moving_time', models.IntegerField(blank=True, null=True)),
                ('recent_run_elapsed_time', models.IntegerField(blank=True, null=True)),
                ('recent_run_elevation_gain', models.FloatField(blank=True, null=True)),
                ('ytd_run_distance', models.FloatField(blank=True, null=True)),
                ('ytd_run_count', models.IntegerField(blank=True, null=True)),
                ('ytd_run_moving_time', models.IntegerField(blank=True, null=True)),
                ('ytd_run_elapsed_time', models.IntegerField(blank=True, null=True)),
                ('ytd_run_elevation_gain', models.FloatField(blank=True, null=True)),
                ('all_time_run_distance', models.FloatField(blank=True, null=True)),
                ('all_time_run_count', models.IntegerField(blank=True, null=True)),
                ('all_time_run_moving_time', models.IntegerField(blank=True, null=True)),
                ('all_time_run_elapsed_time', models.IntegerField(blank=True, null=True)),
                ('all_time_run_elevation_gain', models.FloatField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'permissions': [('can_sync_strava_data', 'Can sync Strava data'), ('can_view_strava_reports', 'Can view Strava reports')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strava_id', models.BigIntegerField(db_index=True, unique=True, verbose_name='Strava Activity ID')),
                ('name', models.CharField(max_length=255, verbose_name='Activity Name')),
                ('activity_type', models.CharField(max_length=50, verbose_name='Activity Type')),
                ('workout_type', models.IntegerField(blank=True, null=True, verbose_name='Workout Type')),
                ('distance', models.FloatField(verbose_name='Distance (meters)')),
                ('moving_time', models.IntegerField(verbose_name='Moving Time (seconds)')),
                ('elapsed_time', models.IntegerField(verbose_name='Elapsed Time (seconds)')),
                ('elevation_gain', models.FloatField(verbose_name='Elevation Gain (meters)')),
                ('start_date', models.DateTimeField(verbose_name='Start Date (UTC)')),
                ('start_date_local', models.DateTimeField(verbose_name='Start Date (Local)')),
                ('timezone', models.CharField(max_length=50, verbose_name='Timezone')),
                ('average_speed', models.FloatField(blank=True, null=True, verbose_name='Average Speed (m/s)')),
                ('max_speed', models.FloatField(blank=True, null=True, verbose_name='Max Speed (m/s)')),
                ('average_heartrate', models.FloatField(blank=True, null=True, verbose_name='Average Heartrate (bpm)')),
                ('max_heartrate', models.FloatField(blank=True, null=True, verbose_name='Max Heartrate (bpm)')),
                ('average_cadence', models.FloatField(blank=True, null=True, verbose_name='Average Cadence (steps/min)')),
                ('has_heartrate', models.BooleanField(default=False, verbose_name='Has Heartrate Data')),
                ('has_power', models.BooleanField(default=False, verbose_name='Has Power Data')),
                ('is_race', models.BooleanField(default=False, verbose_name='Is Race')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='strava_activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Activity',
                'verbose_name_plural': 'Activities',
                'ordering': ['-start_date'],
            },
        ),
    ]
